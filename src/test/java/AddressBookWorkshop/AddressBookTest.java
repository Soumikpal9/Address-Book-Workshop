/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package AddressBookWorkshop;

import org.junit.Test;

import AddressBookWorkshop.AddressBookExecutor.IOService;
import junit.framework.Assert;

import static org.junit.Assert.*;

import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class AddressBookTest {
	@Test
    public void givenEmpPayrollDataInDB_ShouldMatchEmpCount() {
    	AddressBookService addBookService = new AddressBookService();
    	List<ContactDetails> addBookData = addBookService.readAddressBookData(IOService.DB_IO);
    	Assert.assertEquals(6, addBookData.size());
    }
	
	@Test 
    public void givenNewCity_WhenUpdated_shouldMatchWithDB() {
    	AddressBookService addBookService = new AddressBookService();
    	addBookService.readAddressBookData(IOService.DB_IO);
    	addBookService.updateContactsCity1("Soumik", "Noida", IOService.DB_IO);
    	boolean result = addBookService.checkAddressBookDataInSyncWithDB("Soumik");
    	Assert.assertTrue(result);
    }
	
	@Test 
    public void givenDateRange_WhenRetrieved_ShouldMatchContactsCount() {
    	AddressBookService addBookService = new AddressBookService();
    	addBookService.readAddressBookData(IOService.DB_IO);
    	LocalDate startDate = LocalDate.of(2017, 01, 01);
    	LocalDate endDate = LocalDate.now();
    	List<ContactDetails> addBookData = addBookService.readAddressBookForDateRange(IOService.DB_IO, startDate, endDate);
    	Assert.assertEquals(6, addBookData.size());
    }
	
	@Test
    public void givenContactsData_WhenCountByCity_ShouldReturnProperValue() {
    	AddressBookService addBookService = new AddressBookService();
    	addBookService.readAddressBookData(IOService.DB_IO);
    	Map<String, Integer> countContactsByCity = addBookService.readCountContactsByCity(IOService.DB_IO);
    	Assert.assertTrue(countContactsByCity.get("Bangalore").equals(1) && countContactsByCity.get("Kolkata").equals(3) && countContactsByCity.get("Chennai").equals(1) && countContactsByCity.get("Siliguri").equals(1));
    }
	
	@Test
    public void givenContactsData_WhenCountByState_ShouldReturnProperValue() {
    	AddressBookService addBookService = new AddressBookService();
    	addBookService.readAddressBookData(IOService.DB_IO);
    	Map<String, Integer> countContactsByState = addBookService.readCountContactsByState(IOService.DB_IO);
    	Assert.assertTrue(countContactsByState.get("Karnataka").equals(1) && countContactsByState.get("West Bengal").equals(4) && countContactsByState.get("Tamilnadu").equals(1));
    }
	
	@Test
    public void givenNewContact_WhenAdded_ShouldSyncWithDB() {
    	AddressBookService addBookService = new AddressBookService();
    	addBookService.readAddressBookData(IOService.DB_IO);
    	addBookService.addContactToBook("Anirban", "Mukherjee", "Dhakuria", "Kolkata", "West Bengal", "700055", "9191919191", "anirban@gmail.com");
    	boolean result = addBookService.checkAddressBookDataInSyncWithDB("Anirban");
    	Assert.assertTrue(result);
    }
	
	@Test 
    public void given3Contacts_WhenAdded_ShouldMatchContactsCount() {
    	ContactDetails[] addBookData = {
    			new ContactDetails("Aritra", "Pal", "Howrah","Kolkata", "West Bengal", "700066", "9123912391", "aritra@gmail.com"),
    			new ContactDetails("Sneha", "Biswas", "Airport","Kolkata", "West Bengal", "700023", "9156912391", "sneha@gmail.com"),
    			new ContactDetails("Anirban", "Mukherjee", "Dhakuria","Kolkata", "West Bengal", "700044", "9128712391", "anirban@gmail.com"),
    	};
    	AddressBookService addBookService = new AddressBookService();
    	addBookService.readAddressBookData(IOService.DB_IO);
    	Instant threadStart = Instant.now();
    	addBookService.addContactsWithThreads(Arrays.asList(addBookData));
    	Instant threadEnd = Instant.now();
    	System.out.println("Duration with thread : " + Duration.between(threadStart, threadEnd));
    	List<ContactDetails> addressBookData = addBookService.readAddressBookData(IOService.DB_IO);
    	System.out.println(addressBookData.size());
    	Assert.assertEquals(4, addressBookData.size());
    }
}
